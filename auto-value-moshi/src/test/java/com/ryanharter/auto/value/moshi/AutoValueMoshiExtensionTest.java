package com.ryanharter.auto.value.moshi;

import com.google.auto.value.processor.AutoValueProcessor;
import com.google.common.collect.ImmutableSet;
import com.google.testing.compile.JavaFileObjects;
import java.util.Arrays;
import javax.tools.JavaFileObject;
import org.junit.Before;
import org.junit.Test;

import static com.google.common.truth.Truth.assertAbout;
import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;

public final class AutoValueMoshiExtensionTest {
  private JavaFileObject serializedName;
  private JavaFileObject nullable;

  @Before public void setup() {
    serializedName =
        JavaFileObjects.forSourceString("com.ryanharter.auto.value.moshi.SerializedName", ""
            + "package com.ryanharter.auto.value.moshi;\n"
            + "import java.lang.annotation.Retention;\n"
            + "import java.lang.annotation.Target;\n"
            + "import static java.lang.annotation.ElementType.METHOD;\n"
            + "import static java.lang.annotation.ElementType.PARAMETER;\n"
            + "import static java.lang.annotation.ElementType.FIELD;\n"
            + "import static java.lang.annotation.RetentionPolicy.SOURCE;\n"
            + "@Retention(SOURCE)\n"
            + "@Target({METHOD, PARAMETER, FIELD})\n"
            + "public @interface SerializedName {\n"
            + "  String value();\n"
            + "}");

    nullable = JavaFileObjects.forSourceString("com.ryanharter.auto.value.moshi.Nullable", ""
        + "package com.ryanharter.auto.value.moshi;\n"
        + "import java.lang.annotation.Retention;\n"
        + "import java.lang.annotation.Target;\n"
        + "import static java.lang.annotation.ElementType.METHOD;\n"
        + "import static java.lang.annotation.ElementType.PARAMETER;\n"
        + "import static java.lang.annotation.ElementType.FIELD;\n"
        + "import static java.lang.annotation.RetentionPolicy.SOURCE;\n"
        + "@Retention(SOURCE)\n"
        + "@Target({METHOD, PARAMETER, FIELD})\n"
        + "public @interface Nullable {\n"
        + "}");
  }

  @Test public void simple() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.squareup.moshi.Json;\n"
        + "import com.ryanharter.auto.value.moshi.SerializedName;\n"
        + "import com.ryanharter.auto.value.moshi.Nullable;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.util.Map;\n"
        + "import java.util.Set;\n"
        + "@AutoValue public abstract class Test {\n"
        + "  public static JsonAdapter<Test> jsonAdapter(Moshi moshi) {\n"
        + "    return new AutoValue_Test.MoshiJsonAdapter(moshi);\n"
        + "  }\n"
        // Reference type
        + "public abstract String a();\n"
        // Array type
        + "public abstract int[] b();\n"
        // Primitive type
        + "public abstract int c();\n"
        // SerializedName // TODO uncomment this once the target is updated in Moshi
        + "/*@Json(name=\"_D\")*/ public abstract String d();\n"
        // Parametrized type, multiple parameters
        + "public abstract Map<String, Number> e();\n"
        // Parametrized type, single parameter
        + "public abstract Set<? extends String> f();\n"
        // Nested parameterized type
        + "public abstract Map<String, Set<? super String>> g();\n"
        // Nullable type
        + "@Nullable abstract String i();\n"
        + "}\n"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import com.squareup.moshi.Types;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Integer;\n"
        + "import java.lang.Number;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.util.Map;\n"
        + "import java.util.Set;\n"
        + "\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(String a, int[] b, int c, String d, Map<String, Number> e, "
        + "     Set<? extends String> f, Map<String, Set<? super String>> g, String i) {\n"
        + "    super(a, b, c, d, e, f, g, i);\n"
        + "  }\n"
        + "\n"
        + "  public static final class MoshiJsonAdapter extends JsonAdapter<Test> {\n"
        + "  \n"
        + "    private static final String[] NAMES = new String[] {\"a\", \"b\", \"c\", \"d\", "
        + "\"e\", \"f\", \"g\", \"i\"};\n"
        + "    private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);\n"
        + "    private final JsonAdapter<String> aAdapter;\n"
        + "    private final JsonAdapter<int[]> bAdapter;\n"
        + "    private final JsonAdapter<Integer> cAdapter;\n"
        + "    private final JsonAdapter<String> dAdapter;\n"
        + "    private final JsonAdapter<Map<String, Number>> eAdapter;\n"
        + "    private final JsonAdapter<Set<? extends String>> fAdapter;\n"
        + "    private final JsonAdapter<Map<String, Set<? super String>>> gAdapter;\n"
        + "    private final JsonAdapter<String> iAdapter;\n"
        + "  \n"
        + "    public AutoValue_TestJsonAdapter(Moshi moshi) {\n"
        + "      this.aAdapter = moshi.adapter(String.class);\n"
        + "      this.bAdapter = moshi.adapter(int[].class);\n"
        + "      this.cAdapter = moshi.adapter(int.class);\n"
        + "      this.dAdapter = moshi.adapter(String.class);\n"
        + "      this.eAdapter = moshi.adapter(Types.newParameterizedType(Map.class, String.class, "
        + "         Number.class));\n"
        + "      this.fAdapter = moshi.adapter(Types.newParameterizedType(Set.class, "
        + "         Types.subtypeOf(String.class)));\n"
        + "      this.gAdapter = moshi.adapter(Types.newParameterizedType(Map.class, String.class, "
        + "         Types.newParameterizedType(Set.class, Types.supertypeOf(String.class))));\n"
        + "      this.iAdapter = moshi.adapter(String.class);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public Test fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      String a = null;\n"
        + "      int[] b = null;\n"
        + "      int c = 0;\n"
        + "      String d = null;\n"
        + "      Map<String, Number> e = null;\n"
        + "      Set<? extends String> f = null;\n"
        + "      Map<String, Set<? super String>> g = null;\n"
        + "      String i = null;\n"
        + "      while (reader.hasNext()) {\n"
        + "        switch (reader.selectName(OPTIONS)) {\n"
        + "          case 0: {\n"
        + "            a = aAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 1: {\n"
        + "            b = bAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 2: {\n"
        + "            c = cAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 3: {\n"
        + "            d = dAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 4: {\n"
        + "            e = eAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 5: {\n"
        + "            f = fAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 6: {\n"
        + "            g = gAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 7: {\n"
        + "            i = iAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case -1: {\n"
        + "            // Unrecognized name, skip it\n"
        + "            reader.nextName();\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Test(a, b, c, d, e, f, g, i);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public void toJson(JsonWriter writer, Test value) throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"a\");\n"
        + "      aAdapter.toJson(writer, value.a());\n"
        + "      writer.name(\"b\");\n"
        + "      bAdapter.toJson(writer, value.b());\n"
        + "      writer.name(\"c\");\n"
        + "      cAdapter.toJson(writer, value.c());\n"
        + "      writer.name(\"d\");\n"
        + "      dAdapter.toJson(writer, value.d());\n"
        + "      writer.name(\"e\");\n"
        + "      eAdapter.toJson(writer, value.e());\n"
        + "      writer.name(\"f\");\n"
        + "      fAdapter.toJson(writer, value.f());\n"
        + "      writer.name(\"g\");\n"
        + "      gAdapter.toJson(writer, value.g());\n"
        + "      if (value.i() != null) {\n"
        + "        writer.name(\"i\");\n"
        + "        iAdapter.toJson(writer, value.i());\n"
        + "      }\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSources())
        .that(Arrays.asList(serializedName, nullable, source))
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void propertyMethodReferencedWithPrefix() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "@AutoValue public abstract class Test {\n"
        + "  public static JsonAdapter<Test> jsonAdapter(Moshi moshi) {\n"
        + "    return new AutoValue_Test.MoshiJsonAdapter(moshi);\n"
        + "  }\n"
        + "  public abstract String getName();\n"
        + "  public abstract boolean isAwesome();\n"
        + "}"
    );
    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Boolean;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(String name, boolean awesome) {\n"
        + "    super(name, awesome);\n"
        + "  }\n"
        + "\n"
        + "  public static final class MoshiJsonAdapter extends JsonAdapter<Test> {\n"
        + "    private static final String[] NAMES = new String[] {\"name\", \"awesome\"};\n"
        + "    private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);\n"
        + "    private final JsonAdapter<String> nameAdapter;\n"
        + "    private final JsonAdapter<Boolean> awesomeAdapter;\n"
        + "    public AutoValue_TestJsonAdapter(Moshi moshi) {\n"
        + "      this.nameAdapter = moshi.adapter(String.class);\n"
        + "      this.awesomeAdapter = moshi.adapter(boolean.class);\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Test fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      String name = null;\n"
        + "      boolean awesome = false;\n"
        + "      while (reader.hasNext()) {\n"
        + "        switch (reader.selectName(OPTIONS)) {\n"
        + "          case 0: {\n"
        + "            name = nameAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 1: {\n"
        + "            awesome = awesomeAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case -1: {\n"
        + "            // Unrecognized name, skip it\n"
        + "            reader.nextName();\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Test(name, awesome);\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void toJson(JsonWriter writer, Test value) throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"name\");\n"
        + "      nameAdapter.toJson(writer, value.getName());\n"
        + "      writer.name(\"awesome\");\n"
        + "      awesomeAdapter.toJson(writer, value.isAwesome());\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "  }\n"
        + "}");

    assertAbout(javaSources())
        .that(Arrays.asList(source, nullable))
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void usesJsonQualifierAnnotations() {
    JavaFileObject annotation = JavaFileObjects.forSourceString("test.FooPrefix", ""
        + "package test;\n"
        + "import com.squareup.moshi.JsonQualifier;\n"
        + "import java.lang.annotation.Retention;\n"
        + "import static java.lang.annotation.RetentionPolicy.RUNTIME;\n"
        + "@Retention(RUNTIME)\n"
        + "@JsonQualifier\n"
        + "public @interface FooPrefix {\n"
        + "}\n"
    );
    JavaFileObject adapter = JavaFileObjects.forSourceString("test.FooPrefixAdapter", ""
        + "package test;\n"
        + "import com.squareup.moshi.ToJson;\n"
        + "import com.squareup.moshi.FromJson;\n"
        + "import com.squareup.moshi.JsonDataException;\n"
        + "class FooPrefixAdapter {\n"
        + "  @ToJson String fooPrefixStringToString(@FooPrefix String s) {\n"
        + "    return \"foo\" + s;\n"
        + "  }\n"
        + "  @FromJson @FooPrefix String fooPrefixStringFromString(String s) {\n"
        + "    if (!s.startsWith(\"foo\")) throw new JsonDataException();\n"
        + "    return s.substring(3);\n"
        + "  }\n"
        + "}"
    );
    JavaFileObject source = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "@AutoValue public abstract class Foo {\n"
        + "  public static JsonAdapter<Foo> jsonAdapter(Moshi moshi) {\n"
        + "    return new AutoValue_Foo.MoshiJsonAdapter(moshi);\n"
        + "  }\n"
        + "  public abstract String a();\n"
        + "  public abstract @FooPrefix String b();\n"
        + "}\n"
    );
    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Foo", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonQualifier;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.NoSuchMethodException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.lang.annotation.Annotation;\n"
        + "import java.lang.reflect.Method;\n"
        + "import java.util.LinkedHashSet;\n"
        + "import java.util.Set;\n"
        + "\n"
        + "final class AutoValue_Foo extends $AutoValue_Foo {\n"
        + "  AutoValue_Foo(String a, String b) {\n"
        + "    super(a, b);\n"
        + "  }\n"
        + "\n"
        + "  public static final class MoshiJsonAdapter extends JsonAdapter<Foo> {\n"
        + "    private static final String[] NAMES = new String[] {\"a\", \"b\"};\n"
        + "    private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);\n"
        + "    private final JsonAdapter<String> aAdapter;\n"
        + "    private final JsonAdapter<String> bAdapter;\n"
        + "    public AutoValue_FooJsonAdapter(Moshi moshi) {\n"
        + "      this.aAdapter = moshi.adapter(String.class);\n"
        + "      this.bAdapter = adapter(moshi, \"b\");\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Foo fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      String a = null;\n"
        + "      String b = null;\n"
        + "      while (reader.hasNext()) {\n"
        + "        switch (reader.selectName(OPTIONS)) {\n"
        + "          case 0: {\n"
        + "            a = aAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 1: {\n"
        + "            b = bAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case -1: {\n"
        + "            // Unrecognized name, skip it\n"
        + "            reader.nextName();\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Foo(a, b);\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void toJson(JsonWriter writer, Foo value) throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"a\");\n"
        + "      aAdapter.toJson(writer, value.a());\n"
        + "      writer.name(\"b\");\n"
        + "      bAdapter.toJson(writer, value.b());\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "    private JsonAdapter adapter(Moshi moshi, String methodName) {\n"
        + "      try {\n"
        + "        Method method = Foo.class.getDeclaredMethod(methodName);\n"
        + "        Set<Annotation> annotations = new LinkedHashSet<>();\n"
        + "        for (Annotation annotation : method.getAnnotations()) {\n"
        + "          if (annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {\n"
        + "            annotations.add(annotation);\n"
        + "          }\n"
        + "        }\n"
        + "        return moshi.adapter(method.getGenericReturnType(), annotations);\n"
        + "      } catch (NoSuchMethodException e) {\n"
        + "        throw new RuntimeException(\"No method named \" + methodName, e);"
        + "      }\n"
        + "    }\n"
        + "  }\n"
        + "}");

    assertAbout(javaSources())
        .that(Arrays.asList(annotation, adapter, source))
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void usesDefaults() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "@AutoValue public abstract class Test {\n"
        + "  public static JsonAdapter<Test> jsonAdapter(Moshi moshi) {\n"
        + "    return AutoValue_Test.jsonAdapter(moshi);\n"
        + "  }\n"
        + "  public abstract boolean a();\n"
        + "  public abstract byte b();\n"
        + "  public abstract short c();\n"
        + "  public abstract int d();\n"
        + "  public abstract long e();\n"
        + "  public abstract char f();\n"
        + "  public abstract float g();\n"
        + "  public abstract double h();\n"
        + "  public abstract Object i();\n"
        + "}\n"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Boolean;\n"
        + "import java.lang.Byte;\n"
        + "import java.lang.Character;\n"
        + "import java.lang.Double;\n"
        + "import java.lang.Float;\n"
        + "import java.lang.Integer;\n"
        + "import java.lang.Long;\n"
        + "import java.lang.Object;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.Short;\n"
        + "import java.lang.String;\n"
        + "\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(boolean a, byte b, short c, int d, long e, char f, float g, double h,"
        + "      Object i) {\n"
        + "    super(a, b, c, d, e, f, g, h, i);\n"
        + "  }\n"
        + "\n"
        + "  public static final class MoshiJsonAdapter extends JsonAdapter<Test> {\n"
        + "    private static final String[] NAMES = new String[] {\"a\", \"b\", \"c\", \"d\", "
        + "\"e\", \"f\", \"g\", \"h\", \"i\"};\n"
        + "    private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);\n"
        + "    private final JsonAdapter<Boolean> aAdapter;\n"
        + "    private final JsonAdapter<Byte> bAdapter;\n"
        + "    private final JsonAdapter<Short> cAdapter;\n"
        + "    private final JsonAdapter<Integer> dAdapter;\n"
        + "    private final JsonAdapter<Long> eAdapter;\n"
        + "    private final JsonAdapter<Character> fAdapter;\n"
        + "    private final JsonAdapter<Float> gAdapter;\n"
        + "    private final JsonAdapter<Double> hAdapter;\n"
        + "    private final JsonAdapter<Object> iAdapter;\n"
        + "    public MoshiJsonAdapter(Moshi moshi) {\n"
        + "      this.aAdapter = moshi.adapter(boolean.class);\n"
        + "      this.bAdapter = moshi.adapter(byte.class);\n"
        + "      this.cAdapter = moshi.adapter(short.class);\n"
        + "      this.dAdapter = moshi.adapter(int.class);\n"
        + "      this.eAdapter = moshi.adapter(long.class);\n"
        + "      this.fAdapter = moshi.adapter(char.class);\n"
        + "      this.gAdapter = moshi.adapter(float.class);\n"
        + "      this.hAdapter = moshi.adapter(double.class);\n"
        + "      this.iAdapter = moshi.adapter(Object.class);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public Test fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      boolean a = false;\n"
        + "      byte b = (byte) 0;\n"
        + "      short c = 0;\n"
        + "      int d = 0;\n"
        + "      long e = 0L;\n"
        + "      char f = '\0';\n"
        + "      float g = 0.0f;\n"
        + "      double h = 0.0d;\n"
        + "      Object i = null;\n"
        + "      while (reader.hasNext()) {\n"
        + "        switch (reader.selectName(OPTIONS)) {\n"
        + "          case 0: {\n"
        + "            a = aAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 1: {\n"
        + "            b = bAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 2: {\n"
        + "            c = cAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 3: {\n"
        + "            d = dAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 4: {\n"
        + "            e = eAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 5: {\n"
        + "            f = fAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 6: {\n"
        + "            g = gAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 7: {\n"
        + "            h = hAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 8: {\n"
        + "            i = iAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case -1: {\n"
        + "            // Unrecognized name, skip it\n"
        + "            reader.nextName();\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Test(a, b, c, d, e, f, g, h, i);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public void toJson(JsonWriter writer, Test value) throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"a\");\n"
        + "      aAdapter.toJson(writer, value.a());\n"
        + "      writer.name(\"b\");\n"
        + "      bAdapter.toJson(writer, value.b());\n"
        + "      writer.name(\"c\");\n"
        + "      cAdapter.toJson(writer, value.c());\n"
        + "      writer.name(\"d\");\n"
        + "      dAdapter.toJson(writer, value.d());\n"
        + "      writer.name(\"e\");\n"
        + "      eAdapter.toJson(writer, value.e());\n"
        + "      writer.name(\"f\");\n"
        + "      fAdapter.toJson(writer, value.f());\n"
        + "      writer.name(\"g\");\n"
        + "      gAdapter.toJson(writer, value.g());\n"
        + "      writer.name(\"h\");\n"
        + "      hAdapter.toJson(writer, value.h());\n"
        + "      writer.name(\"i\");\n"
        + "      iAdapter.toJson(writer, value.i());\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSource())
        .that(source)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void generatesNothingWithoutJsonAdapterMethod() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "@AutoValue public abstract class Foo {\n"
        + "  public abstract String a();\n"
        + "  public abstract String b();\n"
        + "}\n"
    );
    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Foo", ""
        + "package test;\n"
        + "\n"
        + "import javax.annotation.Generated;\n"
        + "\n"
        + "@Generated(\"com.google.auto.value.processor.AutoValueProcessor\")\n"
        + " final class AutoValue_Foo extends Foo {\n"
        + "\n"
        + "  private final String a;\n"
        + "  private final String b;\n"
        + "\n"
        + "  AutoValue_Foo(\n"
        + "      String a,\n"
        + "      String b) {\n"
        + "    if (a == null) {\n"
        + "      throw new NullPointerException(\"Null a\");\n"
        + "    }\n"
        + "    this.a = a;\n"
        + "    if (b == null) {\n"
        + "      throw new NullPointerException(\"Null b\");\n"
        + "    }\n"
        + "    this.b = b;\n"
        + "  }\n"
        + "\n"
        + "  @Override\n"
        + "  public String a() {\n"
        + "    return a;\n"
        + "  }\n"
        + "\n"
        + "  @Override\n"
        + "  public String b() {\n"
        + "    return b;\n"
        + "  }\n"
        + "\n"
        + "  @Override\n"
        + "  public String toString() {\n"
        + "    return \"Foo{\"\n"
        + "        + \"a=\" + a + \", \"\n"
        + "        + \"b=\" + b\n"
        + "        + \"}\";\n"
        + "  }\n"
        + "\n"
        + "  @Override\n"
        + "  public boolean equals(Object o) {\n"
        + "    if (o == this) {\n"
        + "      return true;\n"
        + "    }\n"
        + "    if (o instanceof Foo) {\n"
        + "      Foo that = (Foo) o;\n"
        + "      return (this.a.equals(that.a()))\n"
        + "           && (this.b.equals(that.b()));\n"
        + "    }\n"
        + "    return false;\n"
        + "  }\n"
        + "\n"
        + "  @Override\n"
        + "  public int hashCode() {\n"
        + "    int h = 1;\n"
        + "    h *= 1000003;\n"
        + "    h ^= this.a.hashCode();\n"
        + "    h *= 1000003;\n"
        + "    h ^= this.b.hashCode();\n"
        + "    return h;\n"
        + "  }\n"
        + "\n"
        + "}");

    assertAbout(javaSource())
        .that(source)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .withWarningCount(2)
        .and()
        .generatesSources(expected);
  }

  @Test public void emitsWarningForWrongTypeAdapterTypeArgument() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "@AutoValue public abstract class Foo {\n"
        + "  public static JsonAdapter<Bar> jsonAdapter(Moshi moshi) {\n"
        + "    return null;"
        + "  }\n"
        + "  public abstract String a();\n"
        + "  public abstract boolean b();\n"
        + "}"
    );

    JavaFileObject source2 = JavaFileObjects.forSourceString("test.Bar", ""
        + "package test;\n"
        + "public class Bar {\n"
        + "}");

    assertAbout(javaSources())
        .that(ImmutableSet.of(source1, source2))
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .withWarningContaining("Found public static method returning JsonAdapter<test.Bar> on "
            + "test.Foo class. Skipping MoshiJsonAdapter generation.");
  }

  @Test public void emitsWarningForNoTypeAdapterTypeArgument() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "@AutoValue public abstract class Foo {\n"
        + "  public static JsonAdapter jsonAdapter(Moshi moshi) {\n"
        + "    return null;"
        + "  }\n"
        + "  public abstract String a();\n"
        + "  public abstract boolean b();\n"
        + "}"
    );

    assertAbout(javaSource())
        .that(source1)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .withWarningContaining("Found public static method returning JsonAdapter with no type "
            + "arguments, skipping MoshiJsonAdapter generation.");
  }

  @Test public void handlesConflictingVariableNames() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "@AutoValue public abstract class Foo {\n"
        + "  public static JsonAdapter<Foo> jsonAdapter(Moshi moshi) {\n"
        + "    return null;"
        + "  }\n"
        + "  public abstract String reader();\n"
        + "  public abstract String name();\n"
        + "}"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Foo", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "\n"
        + "final class AutoValue_Foo extends $AutoValue_Foo {\n"
        + "  AutoValue_Foo(String reader, String name) {\n"
        + "    super(reader, name);\n"
        + "  }\n"
        + "\n"
        + "  public static final class MoshiJsonAdapter extends JsonAdapter<Foo> {\n"
        + "    private static final String[] NAMES = new String[] {\"reader\", \"name\"};\n"
        + "    private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);\n"
        + "    private final JsonAdapter<String> readerAdapter;\n"
        + "    private final JsonAdapter<String> nameAdapter;\n"
        + "    public MoshiJsonAdapter(Moshi moshi) {\n"
        + "      this.readerAdapter = moshi.adapter(String.class);\n"
        + "      this.nameAdapter = moshi.adapter(String.class);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public Foo fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      String reader_ = null;\n"
        + "      String name = null;\n"
        + "      while (reader.hasNext()) {\n"
        + "        switch (reader.selectName(OPTIONS)) {\n"
        + "          case 0: {\n"
        + "            reader_ = readerAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 1: {\n"
        + "            name = nameAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case -1: {\n"
        + "            // Unrecognized name, skip it\n"
        + "            reader.nextName();\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Foo(reader_, name);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public void toJson(JsonWriter writer, Foo value) throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"reader\");\n"
        + "      readerAdapter.toJson(writer, value.reader());\n"
        + "      writer.name(\"name\");\n"
        + "      nameAdapter.toJson(writer, value.name());\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSource())
        .that(source1)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and().generatesSources(expected);
  }

  @Test public void singleGenericAsParameter() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.lang.reflect.Type;\n"
        + "import java.util.List;\n"
        + "@AutoValue public abstract class Foo<V> {\n"
        + "  public static <T>JsonAdapter<Foo<T>> jsonAdapter(Moshi moshi, Type[] types) {\n"
        + "    return null;"
        + "  }\n"
        + "  public abstract List<V> items();\n"
        + "  public abstract String name();\n"
        + "}"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Foo", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import com.squareup.moshi.Types;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.lang.reflect.Type;\n"
        + "import java.util.List;\n"
        + "\n"
        + "final class AutoValue_Foo<V> extends $AutoValue_Foo<V> {\n"
        + "  AutoValue_Foo(List<V> items, String name) {\n"
        + "    super(items, name);\n"
        + "  }\n"
        + "\n"
        + "  public static final class MoshiJsonAdapter<V> extends JsonAdapter<Foo<V>> {\n"
        + "    private static final String[] NAMES = new String[] {\"items\", \"name\"};\n"
        + "    private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);\n"
        + "    private final JsonAdapter<List<V>> itemsAdapter;\n"
        + "    private final JsonAdapter<String> nameAdapter;\n"

        + "    public MoshiJsonAdapter(Moshi moshi, Type[] types) {\n"
        + "      this.itemsAdapter = moshi.adapter(Types.newParameterizedType(List.class, "
        + "        types[0]));\n"
        + "      this.nameAdapter = moshi.adapter(String.class);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public Foo<V> fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      List<V> items = null;\n"
        + "      String name = null;\n"
        + "      while (reader.hasNext()) {\n"
        + "        switch (reader.selectName(OPTIONS)) {\n"
        + "          case 0: {\n"
        + "            items = itemsAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 1: {\n"
        + "            name = nameAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case -1: {\n"
        + "            // Unrecognized name, skip it\n"
        + "            reader.nextName();\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Foo(items, name);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public void toJson(JsonWriter writer, Foo<V> value) "
        + "        throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"items\");\n"
        + "      itemsAdapter.toJson(writer, value.items());\n"
        + "      writer.name(\"name\");\n"
        + "      nameAdapter.toJson(writer, value.name());\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSource())
        .that(source1)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and().generatesSources(expected);
  }

  @Test public void singleGeneric() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.lang.reflect.Type;\n"
        + "@AutoValue public abstract class Foo<V> {\n"
        + "  public static <T>JsonAdapter<Foo<T>> jsonAdapter(Moshi moshi, Type[] types) {\n"
        + "    return null;"
        + "  }\n"
        + "  public abstract V item();\n"
        + "  public abstract String name();\n"
        + "}"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Foo", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.lang.reflect.Type;\n"
        + "\n"
        + "final class AutoValue_Foo<V> extends $AutoValue_Foo<V> {\n"
        + "  AutoValue_Foo(V item, String name) {\n"
        + "    super(item, name);\n"
        + "  }\n"
        + "\n"
        + "  public static final class MoshiJsonAdapter<V> extends JsonAdapter<Foo<V>> {\n"
        + "    private static final String[] NAMES = new String[] {\"item\", \"name\"};\n"
        + "    private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);\n"
        + "    private final JsonAdapter<V> itemAdapter;\n"
        + "    private final JsonAdapter<String> nameAdapter;\n"

        + "    public MoshiJsonAdapter(Moshi moshi, Type[] types) {\n"
        + "      this.itemAdapter = moshi.adapter(types[0]);\n"
        + "      this.nameAdapter = moshi.adapter(String.class);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public Foo<V> fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      V item = null;\n"
        + "      String name = null;\n"
        + "      while (reader.hasNext()) {\n"
        + "        switch (reader.selectName(OPTIONS)) {\n"
        + "          case 0: {\n"
        + "            item = itemAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 1: {\n"
        + "            name = nameAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case -1: {\n"
        + "            // Unrecognized name, skip it\n"
        + "            reader.nextName();\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Foo(item, name);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public void toJson(JsonWriter writer, Foo<V> value) "
        + "        throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"item\");\n"
        + "      itemAdapter.toJson(writer, value.item());\n"
        + "      writer.name(\"name\");\n"
        + "      nameAdapter.toJson(writer, value.name());\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSource())
        .that(source1)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and().generatesSources(expected);
  }

  @Test public void multipleGenerics() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.lang.reflect.Type;\n"
        + "import java.util.List;\n"
        + "@AutoValue public abstract class Foo<V, T> {\n"
        + "  public static <V, T>JsonAdapter<Foo<V, T>> jsonAdapter(Moshi moshi, "
        + "      Type[] types) {\n"
        + "    return null;"
        + "  }\n"
        + "  public abstract List<V> items();\n"
        + "  public abstract List<T> headers();\n"
        + "}"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Foo", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import com.squareup.moshi.Types;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.lang.reflect.Type;\n"
        + "import java.util.List;\n"
        + "\n"
        + "final class AutoValue_Foo<V, T> extends $AutoValue_Foo<V, T> {\n"
        + "  AutoValue_Foo(List<V> items, List<T> headers) {\n"
        + "    super(items, headers);\n"
        + "  }\n"
        + "\n"
        + "  public static final class MoshiJsonAdapter<V, T> "
        + "      extends JsonAdapter<Foo<V, T>> {\n"
        + "    private static final String[] NAMES = new String[] {\"items\", \"headers\"};\n"
        + "    private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);\n"
        + "    private final JsonAdapter<List<V>> itemsAdapter;\n"
        + "    private final JsonAdapter<List<T>> headersAdapter;\n"
        + "\n"
        + "    public MoshiJsonAdapter(Moshi moshi, Type[] types) {\n"
        + "      this.itemsAdapter = moshi.adapter(Types.newParameterizedType(List.class, "
        + "        types[0]));\n"
        + "      this.headersAdapter = moshi.adapter(Types.newParameterizedType(List.class, "
        + "        types[1]));\n"
        + "    }\n"
        + "  \n"
        + "    @Override public Foo<V, T> fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      List<V> items = null;\n"
        + "      List<T> headers = null;\n"
        + "      while (reader.hasNext()) {\n"
        + "        switch (reader.selectName(OPTIONS)) {\n"
        + "          case 0: {\n"
        + "            items = itemsAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 1: {\n"
        + "            headers = headersAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case -1: {\n"
        + "            // Unrecognized name, skip it\n"
        + "            reader.nextName();\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Foo(items, headers);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public void toJson(JsonWriter writer, Foo<V, T> value) "
        + "        throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"items\");\n"
        + "      itemsAdapter.toJson(writer, value.items());\n"
        + "      writer.name(\"headers\");\n"
        + "      headersAdapter.toJson(writer, value.headers());\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSource())
        .that(source1)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void multipleGenericsNotInOrder() {
    JavaFileObject source1 = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.lang.reflect.Type;\n"
        + "import java.util.List;\n"
        + "@AutoValue public abstract class Foo<V, T> {\n"
        + "  public static <V, T>JsonAdapter<Foo<V, T>> jsonAdapter(Moshi moshi, "
        + "      Type[] types) {\n"
        + "    return null;"
        + "  }\n"
        + "  public abstract List<T> items();\n"
        + "  public abstract List<V> headers();\n"
        + "}"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Foo", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import com.squareup.moshi.Types;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.lang.reflect.Type;\n"
        + "import java.util.List;\n"
        + "\n"
        + "final class AutoValue_Foo<V, T> extends $AutoValue_Foo<V, T> {\n"
        + "  AutoValue_Foo(List<T> items, List<V> headers) {\n"
        + "    super(items, headers);\n"
        + "  }\n"
        + "\n"
        + "  public static final class MoshiJsonAdapter<V, T> "
        + "      extends JsonAdapter<Foo<V, T>> {\n"
        + "    private static final String[] NAMES = new String[] {\"items\", \"headers\"};\n"
        + "    private static final JsonReader.Options OPTIONS = JsonReader.Options.of(NAMES);\n"
        + "    private final JsonAdapter<List<T>> itemsAdapter;\n"
        + "    private final JsonAdapter<List<V>> headersAdapter;\n"
        + "\n"
        + "    public MoshiJsonAdapter(Moshi moshi, Type[] types) {\n"
        + "      this.itemsAdapter = moshi.adapter(Types.newParameterizedType(List.class, "
        + "        types[1]));\n"
        + "      this.headersAdapter = moshi.adapter(Types.newParameterizedType(List.class, "
        + "        types[0]));\n"
        + "    }\n"
        + "  \n"
        + "    @Override public Foo<V, T> fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      List<T> items = null;\n"
        + "      List<V> headers = null;\n"
        + "      while (reader.hasNext()) {\n"
        + "        switch (reader.selectName(OPTIONS)) {\n"
        + "          case 0: {\n"
        + "            items = itemsAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case 1: {\n"
        + "            headers = headersAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case -1: {\n"
        + "            // Unrecognized name, skip it\n"
        + "            reader.nextName();\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Foo(items, headers);\n"
        + "    }\n"
        + "  \n"
        + "    @Override public void toJson(JsonWriter writer, Foo<V, T> value) "
        + "        throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"items\");\n"
        + "      itemsAdapter.toJson(writer, value.items());\n"
        + "      writer.name(\"headers\");\n"
        + "      headersAdapter.toJson(writer, value.headers());\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "  }\n"
        + "}"
    );

    assertAbout(javaSource())
        .that(source1)
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and().generatesSources(expected);
  }
}
