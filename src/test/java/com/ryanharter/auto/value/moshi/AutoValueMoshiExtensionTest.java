package com.ryanharter.auto.value.moshi;

import com.google.auto.value.processor.AutoValueProcessor;
import com.google.testing.compile.JavaFileObjects;
import java.util.Arrays;
import javax.tools.JavaFileObject;
import org.junit.Before;
import org.junit.Test;

import static com.google.common.truth.Truth.assertAbout;
import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;

public class AutoValueMoshiExtensionTest {

  private JavaFileObject serializedName;
  private JavaFileObject nullable;

  @Before public void setup() {
    serializedName = JavaFileObjects.forSourceString("com.ryanharter.auto.value.moshi.SerializedName", ""
        + "package com.ryanharter.auto.value.moshi;\n"
        + "import java.lang.annotation.Retention;\n"
        + "import java.lang.annotation.Target;\n"
        + "import static java.lang.annotation.ElementType.METHOD;\n"
        + "import static java.lang.annotation.ElementType.PARAMETER;\n"
        + "import static java.lang.annotation.ElementType.FIELD;\n"
        + "import static java.lang.annotation.RetentionPolicy.SOURCE;\n"
        + "@Retention(SOURCE)\n"
        + "@Target({METHOD, PARAMETER, FIELD})\n"
        + "public @interface SerializedName {\n"
        + "  String value();\n"
        + "}");

    nullable = JavaFileObjects.forSourceString("com.ryanharter.auto.value.moshi.Nullable", ""
        + "package com.ryanharter.auto.value.moshi;\n"
        + "import java.lang.annotation.Retention;\n"
        + "import java.lang.annotation.Target;\n"
        + "import static java.lang.annotation.ElementType.METHOD;\n"
        + "import static java.lang.annotation.ElementType.PARAMETER;\n"
        + "import static java.lang.annotation.ElementType.FIELD;\n"
        + "import static java.lang.annotation.RetentionPolicy.SOURCE;\n"
        + "@Retention(SOURCE)\n"
        + "@Target({METHOD, PARAMETER, FIELD})\n"
        + "public @interface Nullable {\n"
        + "}");
  }

  @Test public void simple() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
            + "package test;\n"
            + "import com.squareup.moshi.Json;\n"
            + "import com.ryanharter.auto.value.moshi.SerializedName;\n"
            + "import com.ryanharter.auto.value.moshi.Nullable;\n"
            + "import com.google.auto.value.AutoValue;\n"
            + "import java.util.Map;\n"
            + "import java.util.Set;\n"
            + "@AutoValue public abstract class Test {\n"
            // Reference type
            + "public abstract String a();\n"
            // Array type
            + "public abstract int[] b();\n"
            // Primitive type
            + "public abstract int c();\n"
            // SerializedName // TODO uncomment this once the target is updated in Moshi
            + "/*@Json(name=\"_D\")*/ public abstract String d();\n"
            // Parametrized type, multiple parameters
            + "public abstract Map<String, Number> e();\n"
            // Parametrized type, single parameter
            + "public abstract Set<String> f();\n"
            // Nested parameterized type
            + "public abstract Map<String, Set<String>> g();\n"
            // Nullable type
            + "@Nullable abstract String i();\n"
            + "}\n"
    );

    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", ""
            + "package test;\n"
            + "\n"
            + "import com.squareup.moshi.JsonAdapter;\n"
            + "import com.squareup.moshi.JsonReader;\n"
            + "import com.squareup.moshi.JsonWriter;\n"
            + "import com.squareup.moshi.Moshi;\n"
            + "import com.squareup.moshi.Types;\n"
            + "import java.io.IOException;\n"
            + "import java.lang.Integer;\n"
            + "import java.lang.Number;\n"
            + "import java.lang.Override;\n"
            + "import java.lang.String;\n"
            + "import java.lang.annotation.Annotation;\n"
            + "import java.lang.reflect.Type;\n"
            + "import java.util.Map;\n"
            + "import java.util.Set;\n"
            + "\n"
            + "final class AutoValue_Test extends $AutoValue_Test {\n"
            + "  AutoValue_Test(String a, int[] b, int c, String d, Map<String, Number> e, Set<String> f, Map<String, Set<String>> g, String i) {\n"
            + "    super(a, b, c, d, e, f, g, i);\n"
            + "  }\n"
            + "\n"
            + "  public static AutoValue_TestJsonAdapterFactory typeAdapterFactory() {\n"
            + "    return new AutoValue_TestJsonAdapterFactory();\n"
            + "  }\n"
            + "\n"
            + "  public static final class AutoValue_TestJsonAdapterFactory implements JsonAdapter.Factory {\n"
            + "    @Override\n"
            + "    public JsonAdapter<Test> create(Type type, Set<? extends Annotation> annotations, Moshi moshi) {\n"
            + "      if (!type.equals(Test.class)) return null;\n"
            + "      return (JsonAdapter<Test>) new AutoValue_TestJsonAdapter(moshi);\n"
            + "    }\n"
            + "  }\n"
            + "  \n"
            + "  public static final class AutoValue_TestJsonAdapter extends JsonAdapter<Test> {\n"
            + "  \n"
            + "    private final JsonAdapter<String> aAdapter;\n"
            + "    private final JsonAdapter<int[]> bAdapter;\n"
            + "    private final JsonAdapter<Integer> cAdapter;\n"
            + "    private final JsonAdapter<String> dAdapter;\n"
            + "    private final JsonAdapter<Map<String, Number>> eAdapter;\n"
            + "    private final JsonAdapter<Set<String>> fAdapter;\n"
            + "    private final JsonAdapter<Map<String, Set<String>>> gAdapter;\n"
            + "    private final JsonAdapter<String> iAdapter;\n"
            + "  \n"
            + "    public AutoValue_TestJsonAdapter(Moshi moshi) {\n"
            + "      this.aAdapter = moshi.adapter(String.class);\n"
            + "      this.bAdapter = moshi.adapter(int[].class);\n"
            + "      this.cAdapter = moshi.adapter(Integer.class);\n"
            + "      this.dAdapter = moshi.adapter(String.class);\n"
            + "      this.eAdapter = moshi.adapter(Types.newParameterizedType(Map.class, String.class, Number.class));\n"
            + "      this.fAdapter = moshi.adapter(Types.newParameterizedType(Set.class, String.class));\n"
            + "      this.gAdapter = moshi.adapter(Types.newParameterizedType(Map.class, String.class, Types.newParameterizedType(Set.class, String.class)));\n"
            + "      this.iAdapter = moshi.adapter(String.class);\n"
            + "    }\n"
            + "  \n"
            + "    @Override public Test fromJson(JsonReader reader) throws IOException {\n"
            + "      reader.beginObject();\n"
            + "      String a = null;\n"
            + "      int[] b = null;\n"
            + "      Integer c = null;\n"
            + "      String d = null;\n"
            + "      Map<String, Number> e = null;\n"
            + "      Set<String> f = null;\n"
            + "      Map<String, Set<String>> g = null;\n"
            + "      String i = null;\n"
            + "      while (reader.hasNext()) {\n"
            + "        String _name = reader.nextName();\n"
            + "        if (reader.peek() == JsonReader.Token.NULL) {\n"
            + "          reader.skipValue();\n"
            + "          continue;\n"
            + "        }\n"
            + "        switch (_name) {\n"
            + "          case \"a\": {\n"
            + "            a = aAdapter.fromJson(reader);\n"
            + "            break;\n"
            + "          }\n"
            + "          case \"b\": {\n"
            + "            b = bAdapter.fromJson(reader);\n"
            + "            break;\n"
            + "          }\n"
            + "          case \"c\": {\n"
            + "            c = cAdapter.fromJson(reader);\n"
            + "            break;\n"
            + "          }\n"
            + "          case \"d\": {\n"
            + "            d = dAdapter.fromJson(reader);\n"
            + "            break;\n"
            + "          }\n"
            + "          case \"e\": {\n"
            + "            e = eAdapter.fromJson(reader);\n"
            + "            break;\n"
            + "          }\n"
            + "          case \"f\": {\n"
            + "            f = fAdapter.fromJson(reader);\n"
            + "            break;\n"
            + "          }\n"
            + "          case \"g\": {\n"
            + "            g = gAdapter.fromJson(reader);\n"
            + "            break;\n"
            + "          }\n"
            + "          case \"i\": {\n"
            + "            i = iAdapter.fromJson(reader);\n"
            + "            break;\n"
            + "          }\n"
            + "          default: {\n"
            + "            reader.skipValue();\n"
            + "          }\n"
            + "        }\n"
            + "      }\n"
            + "      reader.endObject();\n"
            + "      return new AutoValue_Test(a, b, c, d, e, f, g, i);\n"
            + "    }\n"
            + "  \n"
            + "    @Override public void toJson(JsonWriter writer, Test value) throws IOException {\n"
            + "      writer.beginObject();\n"
            + "      writer.name(\"a\");\n"
            + "      aAdapter.toJson(writer, value.a());\n"
            + "      writer.name(\"b\");\n"
            + "      bAdapter.toJson(writer, value.b());\n"
            + "      writer.name(\"c\");\n"
            + "      cAdapter.toJson(writer, value.c());\n"
            + "      writer.name(\"d\");\n"
            + "      dAdapter.toJson(writer, value.d());\n"
            + "      writer.name(\"e\");\n"
            + "      eAdapter.toJson(writer, value.e());\n"
            + "      writer.name(\"f\");\n"
            + "      fAdapter.toJson(writer, value.f());\n"
            + "      writer.name(\"g\");\n"
            + "      gAdapter.toJson(writer, value.g());\n"
            + "      if (value.i() != null) {\n"
            + "        writer.name(\"i\");\n"
            + "        iAdapter.toJson(writer, value.i());\n"
            + "      }\n"
            + "      writer.endObject();\n"
            + "    }\n"
            + "  }\n"
            + "}"
    );

    assertAbout(javaSources())
        .that(Arrays.asList(serializedName, nullable, source))
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void propertyMethodReferencedWithPrefix() {
    JavaFileObject source = JavaFileObjects.forSourceString("test.Test", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "@AutoValue public abstract class Test {\n"
        + "  public abstract String getName();\n"
        + "  public abstract boolean isAwesome();\n"
        + "}"
    );
    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Test", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.Boolean;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.lang.annotation.Annotation;\n"
        + "import java.lang.reflect.Type;\n"
        + "import java.util.Set;\n"
        + "\n"
        + "final class AutoValue_Test extends $AutoValue_Test {\n"
        + "  AutoValue_Test(String name, boolean awesome) {\n"
        + "    super(name, awesome);\n"
        + "  }\n"
        + "\n"
        + "  public static AutoValue_TestJsonAdapterFactory typeAdapterFactory() {\n"
        + "    return new AutoValue_TestJsonAdapterFactory();\n"
        + "  }\n"
        + "\n"
        + "  public static final class AutoValue_TestJsonAdapterFactory implements JsonAdapter.Factory {\n"
        + "    @Override\n"
        + "    public JsonAdapter<Test> create(Type type, Set<? extends Annotation> annotations, Moshi moshi) {\n"
        + "      if (!type.equals(Test.class)) return null;\n"
        + "      return (JsonAdapter<Test>) new AutoValue_TestJsonAdapter(moshi);\n"
        + "    }\n"
        + "  }\n"
        + "\n"
        + "  public static final class AutoValue_TestJsonAdapter extends JsonAdapter<Test> {\n"
        + "    private final JsonAdapter<String> nameAdapter;\n"
        + "    private final JsonAdapter<Boolean> awesomeAdapter;\n"
        + "    public AutoValue_TestJsonAdapter(Moshi moshi) {\n"
        + "      this.nameAdapter = moshi.adapter(String.class);\n"
        + "      this.awesomeAdapter = moshi.adapter(Boolean.class);\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Test fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      String name = null;\n"
        + "      Boolean awesome = null;\n"
        + "      while (reader.hasNext()) {\n"
        + "        String _name = reader.nextName();\n"
        + "        if (reader.peek() == JsonReader.Token.NULL) {\n"
        + "          reader.skipValue();\n"
        + "          continue;\n"
        + "        }\n"
        + "        switch (_name) {\n"
        + "          case \"name\": {\n"
        + "            name = nameAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"awesome\": {\n"
        + "            awesome = awesomeAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          default: {\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Test(name, awesome);\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void toJson(JsonWriter writer, Test value) throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"name\");\n"
        + "      nameAdapter.toJson(writer, value.getName());\n"
        + "      writer.name(\"awesome\");\n"
        + "      awesomeAdapter.toJson(writer, value.isAwesome());\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "  }\n"
        + "}");

    assertAbout(javaSources())
        .that(Arrays.asList(source, nullable))
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }

  @Test public void usesJsonQualifierAnnotations() {
    JavaFileObject annotation = JavaFileObjects.forSourceString("test.FooPrefix", ""
        + "package test;\n"
        + "import com.squareup.moshi.JsonQualifier;\n"
        + "import java.lang.annotation.Retention;\n"
        + "import static java.lang.annotation.RetentionPolicy.RUNTIME;\n"
        + "@Retention(RUNTIME)\n"
        + "@JsonQualifier\n"
        + "public @interface FooPrefix {\n"
        + "}\n"
    );
    JavaFileObject adapter = JavaFileObjects.forSourceString("test.FooPrefixAdapter", ""
        + "package test;\n"
        + "import com.squareup.moshi.ToJson;\n"
        + "import com.squareup.moshi.FromJson;\n"
        + "import com.squareup.moshi.JsonDataException;\n"
        + "class FooPrefixAdapter {\n"
        + "  @ToJson String fooPrefixStringToString(@FooPrefix String s) {\n"
        + "    return \"foo\" + s;\n"
        + "  }\n"
        + "  @FromJson @FooPrefix String fooPrefixStringFromString(String s) {\n"
        + "    if (!s.startsWith(\"foo\")) throw new JsonDataException();\n"
        + "    return s.substring(3);\n"
        + "  }\n"
        + "}"
    );
    JavaFileObject source = JavaFileObjects.forSourceString("test.Foo", ""
        + "package test;\n"
        + "import com.google.auto.value.AutoValue;\n"
        + "@AutoValue public abstract class Foo {\n"
        + "  public abstract String a();\n"
        + "  public abstract @FooPrefix String b();\n"
        + "}\n"
    );
    JavaFileObject expected = JavaFileObjects.forSourceString("test/AutoValue_Foo", ""
        + "package test;\n"
        + "\n"
        + "import com.squareup.moshi.JsonAdapter;\n"
        + "import com.squareup.moshi.JsonQualifier;\n"
        + "import com.squareup.moshi.JsonReader;\n"
        + "import com.squareup.moshi.JsonWriter;\n"
        + "import com.squareup.moshi.Moshi;\n"
        + "import java.io.IOException;\n"
        + "import java.lang.NoSuchMethodException;\n"
        + "import java.lang.Override;\n"
        + "import java.lang.String;\n"
        + "import java.lang.annotation.Annotation;\n"
        + "import java.lang.reflect.Method;\n"
        + "import java.lang.reflect.Type;\n"
        + "import java.util.LinkedHashSet;\n"
        + "import java.util.Set;\n"
        + "\n"
        + "final class AutoValue_Foo extends $AutoValue_Foo {\n"
        + "  AutoValue_Foo(String a, String b) {\n"
        + "    super(a, b);\n"
        + "  }\n"
        + "\n"
        + "  public static AutoValue_FooJsonAdapterFactory typeAdapterFactory() {\n"
        + "    return new AutoValue_FooJsonAdapterFactory();\n"
        + "  }\n"
        + "\n"
        + "  public static final class AutoValue_FooJsonAdapterFactory implements JsonAdapter.Factory {\n"
        + "    @Override\n"
        + "    public JsonAdapter<Foo> create(Type type, Set<? extends Annotation> annotations, Moshi moshi) {\n"
        + "      if (!type.equals(Foo.class)) return null;\n"
        + "      return (JsonAdapter<Foo>) new AutoValue_FooJsonAdapter(moshi);\n"
        + "    }\n"
        + "  }\n"
        + "\n"
        + "  public static final class AutoValue_FooJsonAdapter extends JsonAdapter<Foo> {\n"
        + "    private final JsonAdapter<String> aAdapter;\n"
        + "    private final JsonAdapter<String> bAdapter;\n"
        + "    public AutoValue_FooJsonAdapter(Moshi moshi) {\n"
        + "      this.aAdapter = moshi.adapter(String.class);\n"
        + "      this.bAdapter = adapter(moshi, \"b\");\n"
        + "    }\n"
        + "    @Override\n"
        + "    public Foo fromJson(JsonReader reader) throws IOException {\n"
        + "      reader.beginObject();\n"
        + "      String a = null;\n"
        + "      String b= null;\n"
        + "      while (reader.hasNext()) {\n"
        + "        String _name = reader.nextName();\n"
        + "        if (reader.peek() == JsonReader.Token.NULL) {\n"
        + "          reader.skipValue();\n"
        + "          continue;\n"
        + "        }\n"
        + "        switch (_name) {\n"
        + "          case \"a\": {\n"
        + "            a = aAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          case \"b\": {\n"
        + "            b = bAdapter.fromJson(reader);\n"
        + "            break;\n"
        + "          }\n"
        + "          default: {\n"
        + "            reader.skipValue();\n"
        + "          }\n"
        + "        }\n"
        + "      }\n"
        + "      reader.endObject();\n"
        + "      return new AutoValue_Foo(a, b);\n"
        + "    }\n"
        + "    @Override\n"
        + "    public void toJson(JsonWriter writer, Foo value) throws IOException {\n"
        + "      writer.beginObject();\n"
        + "      writer.name(\"a\");\n"
        + "      aAdapter.toJson(writer, value.a());\n"
        + "      writer.name(\"b\");\n"
        + "      bAdapter.toJson(writer, value.b());\n"
        + "      writer.endObject();\n"
        + "    }\n"
        + "    private JsonAdapter adapter(Moshi moshi, String methodName) {\n"
        + "      try {\n"
        + "        Method method = Foo.class.getDeclaredMethod(methodName);\n"
        + "        Set<Annotation> annotations = new LinkedHashSet<Annotation>();\n"
        + "        for (Annotation annotation : method.getAnnotations()) {\n"
        + "          if (annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {\n"
        + "            annotations.add(annotation);\n"
        + "          }\n"
        + "        }\n"
        + "        return moshi.adapter(method.getReturnType(), annotations);\n"
        + "      } catch (NoSuchMethodException e) {\n"
        + "        throw new RuntimeException(\"No method named \" + methodName, e);"
        + "      }\n"
        + "    }\n"
        + "  }\n"
        + "}");

    assertAbout(javaSources())
        .that(Arrays.asList(annotation, adapter, source))
        .processedWith(new AutoValueProcessor())
        .compilesWithoutError()
        .and()
        .generatesSources(expected);
  }
}
